@page "/"
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager Navigation

<h3>Simulação de Perseguição Policial</h3>

<!-- Controles para criar e atualizar -->
<div>
    <label for="qtdLadroes">Ladrões:</label>
    <input type="number" id="qtdLadroes" @bind="quantidadeLadroes" min="1" />
    <button @onclick="CriarLadroes">Criar Ladrões</button>
</div>

<div>
    <label for="qtdPoliciais">Policiais:</label>
    <input type="number" id="qtdPoliciais" @bind="quantidadePoliciais" min="1" />
    <button @onclick="CriarPoliciais">Criar Policiais</button>
</div>

<button @onclick="AtualizarPosicoes">Atualizar Posições</button>

<!-- Visualização do mapa -->
<div id="mapa" style="position: relative; width: 500px; height: 500px; border: 1px solid black;">
    @foreach (var ator in atoresPosicoes)
    {
        <div class="ator"
             style="
                 position: absolute;
                 width: 20px;
                 height: 20px;
                 border-radius: 50%;
                 background-color: @(ator.Key.StartsWith("ladrao") ? "red" : "blue");
                 left: @(Math.Clamp(ator.Value.X * 50 - 10, 0, 480))px;
                 top: @(Math.Clamp(ator.Value.Y * 50 - 10, 0, 480))px;
             "
             title="@ator.Key">
        </div>
    }
</div>

<h4>@modoFugaMensagem</h4>

@code {
    private HubConnection? hubConnection;
    private int quantidadeLadroes = 1;
    private int quantidadePoliciais = 1;
    private Dictionary<string, (int X, int Y)> atoresPosicoes = new();
    private string modoFugaMensagem = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("http://localhost:5185/jogoHub"))
            .Build();

        // Atualiza posições dos atores em tempo real
        hubConnection.On<string, (int X, int Y)>("AtualizarPosicao", (nome, posicao) =>
        {
            atoresPosicoes[nome] = posicao;
            Console.WriteLine($"Ator atualizado: {nome}, Nova posição: {posicao}");
            StateHasChanged(); // Força a re-renderização do mapa
        });

        // Notificação do modo fuga
        hubConnection.On<string, string>("ModoFugaIniciado", (nomeLadrao, nomePolicial) =>
        {
            modoFugaMensagem = $"⚠️ Modo fuga iniciado! Ladrão: {nomeLadrao}, Policial: {nomePolicial}";
            StateHasChanged(); // Atualiza a interface para mostrar o alerta
        });

        await hubConnection.StartAsync();
    }

    private async Task CriarLadroes()
    {
        if (hubConnection is not null)
        {
            for (int i = 0; i < quantidadeLadroes; i++)
            {
                await hubConnection.InvokeAsync("CriarLadrao");
            }
        }
    }

    private async Task CriarPoliciais()
    {
        if (hubConnection is not null)
        {
            for (int i = 0; i < quantidadePoliciais; i++)
            {
                await hubConnection.InvokeAsync("CriarPolicial");
            }
        }
    }

    private async Task AtualizarPosicoes()
    {
        if (hubConnection is not null)
        {
            await hubConnection.InvokeAsync("AtualizarPosicoes");
        }

        hubConnection!.On<string, (int X, int Y)>("AtualizarPosicao", (nome, posicao) =>
        {
            if (!atoresPosicoes.ContainsKey(nome))
            {
                atoresPosicoes[nome] = posicao; // Adiciona novo ator, se necessário
            }
            else
            {
                atoresPosicoes[nome] = posicao; // Atualiza posição existente
            }

            StateHasChanged(); // Re-renderiza o mapa com as novas posições
        });
    }
}