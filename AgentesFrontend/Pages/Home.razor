@page "/"
@using Microsoft.AspNetCore.SignalR.Client
@using System.Text.Json
@inject NavigationManager Navigation
<section class="d-flex flex-column align-items-center text-center">
    <h3>Simulação de Perseguição Policial</h3>

    <div class="d-flex flex-column gap-3 mb-3">
        <div>
            <label for="qtdLadroes">Ladrões:</label>
            <input type="number" id="qtdLadroes" @bind="quantidadeLadroes" min="1" class="form-control d-inline-block w-auto mx-2" />
            <button @onclick="CriarLadroes" class="btn btn-danger">Criar Ladrões</button>
        </div>

        <div>
            <label for="qtdPoliciais">Policiais:</label>
            <input type="number" id="qtdPoliciais" @bind="quantidadePoliciais" min="1" class="form-control d-inline-block w-auto mx-2" />
            <button @onclick="CriarPoliciais" class="btn btn-primary">Criar Policiais</button>
        </div>
    </div>

    <button @onclick="AtualizarPosicoes" class="btn btn-warning">Atualizar Posições</button>
</section>

<div id="mapa" style="position: relative; width: 500px; height: 500px; border: 1px solid black;">
    @foreach (var ator in atoresPosicoes)
    {
        <div class="ator @(ator.Key.StartsWith("ladrao") ? "bg-danger" : "bg-primary")"
             style="
                 position: absolute;
                 width: 20px;
                 height: 20px;
                 border-radius: 50%;
                 left: @(Math.Clamp(ator.Value.X * 50 - 10, 0, 480))px;
                 top: @(Math.Clamp(ator.Value.Y * 50 - 10, 0, 480))px;
             "
             title="@ator.Key">
        </div>
    }
</div>

<h4>@modoFugaMensagem</h4>

@code {
    private HubConnection? hubConnection;
    private int quantidadeLadroes = 1;
    private int quantidadePoliciais = 1;
    private Dictionary<string, (int X, int Y)> atoresPosicoes = new();
    private string modoFugaMensagem = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("http://localhost:5185/jogoHub"))
            .Build();

        hubConnection.On<string, dynamic>("AtualizarPosicao", (nome, posicao) =>
        {
            JsonElement json = (JsonElement)posicao;
            int x = json.GetProperty("x").GetInt32();
            int y = json.GetProperty("y").GetInt32();
            atoresPosicoes[nome] = (x, y);
            Console.WriteLine($"Ator atualizado: {nome}, Nova posição: {posicao}");
        });

        hubConnection.On<string, string>("ModoFugaIniciado", (nomeLadrao, nomePolicial) =>
        {
            modoFugaMensagem = $"⚠️ Modo fuga iniciado! Ladrão: {nomeLadrao}, Policial: {nomePolicial}";
            StateHasChanged();
        });

        await hubConnection.StartAsync();
    }

    private async Task CriarLadroes()
    {
        if (hubConnection is not null)
        {
            for (int i = 0; i < quantidadeLadroes; i++)
            {
                await hubConnection.InvokeAsync("CriarLadrao");
            }
            StateHasChanged();
        }
    }

    private async Task CriarPoliciais()
    {
        if (hubConnection is not null)
        {
            for (int i = 0; i < quantidadePoliciais; i++)
            {
                await hubConnection.InvokeAsync("CriarPolicial");
            }
            StateHasChanged();
        }
    }

    private async Task AtualizarPosicoes()
    {
        if (hubConnection is not null)
        {
            await hubConnection.InvokeAsync("AtualizarPosicoes");
        }

        hubConnection!.On<string, (int X, int Y)>("AtualizarPosicao", (nome, posicao) =>
        {
            atoresPosicoes[nome] = posicao;
            StateHasChanged();
        });
    }
}
